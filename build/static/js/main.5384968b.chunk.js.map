{"version":3,"sources":["Header.js","SwipeButtons.js","axios.js","TinderCards.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","IconButton","fontSize","src","alt","SwipeButtons","instance","axios","create","baseURL","TinderCards","useState","people","setPeople","useEffect","a","get","req","data","fetchData","console","log","map","person","key","name","preventSwipe","onSwipe","dir","nameToDelete","onCardLeftScreen","style","backgroundImage","imgUrl","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yYA0BeA,MApBf,WACI,OACI,yBAAKC,UAAU,UACX,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAYC,SAAS,QAAQF,UAAU,kBAG3C,yBACIA,UAAU,eACVG,IAAI,mEACJC,IAAI,KAER,kBAACH,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWC,SAAS,QAAQF,UAAU,oB,6FCYvCK,MAtBf,WACI,OACI,yBAAKL,UAAU,gBACX,kBAACC,EAAA,EAAD,CAAYD,UAAU,wBAClB,kBAAC,IAAD,CAAYE,SAAS,WAEzB,kBAACD,EAAA,EAAD,CAAYD,UAAU,sBAClB,kBAAC,IAAD,CAAWE,SAAS,WAExB,kBAACD,EAAA,EAAD,CAAYD,UAAU,sBAClB,kBAAC,IAAD,CAAcE,SAAS,WAE3B,kBAACD,EAAA,EAAD,CAAYD,UAAU,uBAClB,kBAAC,IAAD,CAAcE,SAAS,WAE3B,kBAACD,EAAA,EAAD,CAAYD,UAAU,2BAClB,kBAAC,IAAD,CAAaE,SAAS,a,iDCnBvBI,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAQ,oDCsDGC,MApDf,WAAwB,IAAD,EAESC,mBAAS,IAFlB,mBAEZC,EAFY,KAEJC,EAFI,KAyBnB,OArBAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACsBR,EAAMS,IAAI,iBADhC,OACUC,EADV,OAGIJ,EAAUI,EAAIC,MAHlB,4CADY,uBAAC,WAAD,wBAOZC,KAED,IAEHC,QAAQC,IAAI,OAAOT,GAWf,yBAAKZ,UAAU,eACX,yBAAKA,UAAU,0BAEPY,EAAOU,KAAI,SAACC,GAAD,OACP,kBAAC,IAAD,CACIvB,UAAU,QACVwB,IAAKD,EAAOE,KACZC,aAAc,CAAC,KAAM,QACrBC,QAAS,SAACC,GAAD,OAjBNC,EAiB2BN,EAAOE,UAhBzDL,QAAQC,IAAI,aAAaQ,GADd,IAAYA,GAkBHC,iBAAkB,kBAdtBL,EAcuCF,EAAOE,UAb9DL,QAAQC,IAAII,EAAO,uBADJ,IAACA,IAgBI,yBACIM,MAAO,CAACC,gBAAgB,OAAD,OAAST,EAAOU,OAAhB,MACvBjC,UAAU,QAEN,4BAAKuB,EAAOE,cC7BjCS,MAVf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.5384968b.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css';\nimport PersonIcon from '@material-ui/icons/Person';\nimport IconButton  from '@material-ui/core/IconButton';\nimport ForumIcon from '@material-ui/icons/Forum';\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <IconButton>\n                <PersonIcon fontSize=\"large\" className=\"header__icon\"/>\n            </IconButton>\n            \n            <img\n                className=\"header__logo\"\n                src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\"\n                alt=\"\"/>\n            \n            <IconButton>\n                <ForumIcon fontSize=\"large\" className=\"header__icon\"/>\n            </IconButton>\n\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport './SwipeButtons.css';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport CloseIcon from '@material-ui/icons/Close';\nimport StarRateIcon from '@material-ui/icons/StarRate';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport IconButton from '@material-ui/core/IconButton'\n\nfunction SwipeButtons() {\n    return (\n        <div className=\"swipeButtons\">\n            <IconButton className=\"swipeButtons__repeat\">\n                <ReplayIcon fontSize=\"large\"/>\n            </IconButton>\n            <IconButton className=\"swipeButtons__left\">\n                <CloseIcon fontSize=\"large\"/>\n            </IconButton>\n            <IconButton className=\"swipeButtons__star\">\n                <StarRateIcon fontSize=\"large\"/>\n            </IconButton>\n            <IconButton className=\"swipeButtons__right\">\n                <FavoriteIcon fontSize=\"large\"/>\n            </IconButton>\n            <IconButton className=\"swipeButtons__lightning\">\n                <FlashOnIcon fontSize=\"large\"/>\n            </IconButton>\n        </div>\n    )\n}\n\nexport default SwipeButtons\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL:'https://raystatic-tinder-backend.herokuapp.com/'\n})\n\nexport default instance;","import React, {useEffect, useState} from 'react'\nimport TinderCard from 'react-tinder-card';\nimport './TinderCards.css';\nimport axios from './axios';\n\nfunction TinderCards() {\n\n    const [people, setPeople] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const req = await axios.get('/tinder/cards');\n\n            setPeople(req.data);\n        }\n\n        fetchData();\n\n    }, [])\n\n    console.log('data',people);\n\n    const swiped = (direction, nameToDelete) => {\n        console.log(\"removing: \"+nameToDelete)\n    }\n\n    const outOfFrame = (name) => {\n        console.log(name + \" left of the screen\")\n    }\n\n    return (\n        <div className=\"tinderCards\">\n            <div className=\"tinderCards__container\">\n                {\n                    people.map((person) => (\n                        <TinderCard \n                            className=\"swipe\"\n                            key={person.name}\n                            preventSwipe={[\"up\", \"down\"]}\n                            onSwipe={(dir) => swiped(dir, person.name)}\n                            onCardLeftScreen={() => outOfFrame(person.name)}\n                        >\n                            <div\n                                style={{backgroundImage: `url(${person.imgUrl})`}}\n                                className=\"card\"\n                                >\n                                    <h3>{person.name}</h3>    \n                            </div>\n\n                        </TinderCard>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default TinderCards\n","import React from 'react';\nimport TinderCard from 'react-tinder-card';\nimport './App.css';\nimport Header from './Header';\nimport SwipeButtons from './SwipeButtons';\nimport TinderCards from './TinderCards';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header/>\n      <TinderCards/>\n      <SwipeButtons/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}